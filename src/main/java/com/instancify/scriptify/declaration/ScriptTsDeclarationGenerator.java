package com.instancify.scriptify.declaration;

import com.instancify.scriptify.api.script.Script;
import com.instancify.scriptify.api.script.constant.ScriptConstant;
import com.instancify.scriptify.api.script.constant.ScriptConstantManager;
import com.instancify.scriptify.api.script.function.ScriptFunctionManager;
import com.instancify.scriptify.api.script.function.definition.ScriptFunctionDefinition;
import com.instancify.scriptify.api.script.function.definition.ScriptFunctionExecutor;
import com.instancify.scriptify.declaration.util.JavaToTypeScriptConverter;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

/**
 * Generator for Scriptify functions declarations.
 */
public class ScriptTsDeclarationGenerator {

    private final Script<?> script;

    public ScriptTsDeclarationGenerator(Script<?> script) {
        this.script = script;
    }

    /**
     * Returns the main header of the declaration.
     *
     * @return String header
     */
    public String getHeader() {
        StringBuilder sb = new StringBuilder("/**\n");
        sb.append(" * Auto-generated by Scriptify DTS Generator\n");
        sb.append(" * https://github.com/Instancify/Scriptify-DTS-Generator\n");
        sb.append(" */\n\n");
        return sb.toString();
    }

    /**
     * Generates a declaration of constants and functions.
     *
     * @return Generated declaration
     */
    public String generate() {
        StringBuilder sb = new StringBuilder(this.getHeader());

        // Generate constant declarations
        ScriptConstantManager constantManager = script.getConstantManager();
        if (constantManager != null) {
            for (ScriptConstant constant : constantManager.getConstants().values()) {
                Object value = constant.getValue();
                sb.append("declare const ")
                        .append(constant.getName())
                        .append(": ")
                        .append(JavaToTypeScriptConverter.convert(value != null ? value.getClass() : null))
                        .append(";\n\n");
            }
        }

        // Generate function declarations
        ScriptFunctionManager functionManager = script.getFunctionManager();
        if (functionManager != null) {
            for (ScriptFunctionDefinition def : functionManager.getFunctions().values()) {
                for (ScriptFunctionExecutor executor : def.getExecutors()) {
                    sb.append("/**\n")
                            .append(" * Script ").append(def.getFunction().getName()).append(" function").append("\n");
                    for (var arg : executor.getArguments()) {
                        sb.append(" * @param ").append(arg.getName())
                                .append(" ").append(arg.isRequired() ? "(required)" : "(optional)")
                                .append("\n");
                    }
                    sb.append(" */\n");

                    sb.append("declare function ")
                            .append(def.getFunction().getName())
                            .append("(");

                    List<String> params = new ArrayList<>();
                    for (var arg : executor.getArguments()) {
                        params.add(
                                arg.getName() +
                                        (arg.isRequired() ? "" : "?") +
                                        ": " + JavaToTypeScriptConverter.convert(arg.getType())
                        );
                    }
                    sb.append(String.join(", ", params))
                            .append("): ")
                            .append(JavaToTypeScriptConverter.convert(executor.getMethod().getReturnType()))
                            .append(";\n\n");
                }
            }
        }

        return sb.toString();
    }

    /**
     * Generates and saves the declaration as a file.
     *
     * @param path Save path
     */
    public void save(Path path) {
        try {
            Files.writeString(path, this.generate());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
